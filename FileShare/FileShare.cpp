// FileShare.cpp : 定义应用程序的类行为。
//

#include "stdafx.h"
#include "FileShare.h"
#include "FileShareDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CFileShareApp

BEGIN_MESSAGE_MAP(CFileShareApp, CWinApp)
	ON_COMMAND(ID_HELP, &CWinApp::OnHelp)
END_MESSAGE_MAP()


// CFileShareApp 构造

CFileShareApp::CFileShareApp()
{
	// TODO: 在此处添加构造代码，
	// 将所有重要的初始化放置在 InitInstance 中
	
}


// 唯一的一个 CFileShareApp 对象

CFileShareApp theApp;

// CFileShareApp 初始化

BOOL CFileShareApp::InitInstance()
{
	// 如果一个运行在 Windows XP 上的应用程序清单指定要
	// 使用 ComCtl32.dll 版本 6 或更高版本来启用可视化方式，
	//则需要 InitCommonControlsEx()。否则，将无法创建窗口。
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);
	// 将它设置为包括所有要在应用程序中使用的
	// 公共控件类。
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	CWinApp::InitInstance();

	AfxEnableControlContainer();

	// 标准初始化
	// 如果未使用这些功能并希望减小
	// 最终可执行文件的大小，则应移除下列
	// 不需要的特定初始化例程
	// 更改用于存储设置的注册表项
	// TODO: 应适当修改该字符串，
	// 例如修改为公司或组织名
	SetRegistryKey(_T("应用程序向导生成的本地应用程序"));

	m_SendDataEvent.SetEvent();
	CoInitialize(NULL);
	m_ShareInfo=new CShareInfo();
	m_ShareInfo->Load(GetExeFolderPath()+L"\\"+FS_SHAREINFO);
	
	m_NiThread=new CNiThread();
	m_NiThread->CreateThread();

	m_TaskThread=new CTaskThread[TASK_THREAD_NUM];
	for(int i=0;i<TASK_THREAD_NUM;i++)
	{
		m_TaskThread[i].CreateThread();
	}
	
	CFileShareDlg dlg;
	m_pMainWnd = &dlg;
	INT_PTR nResponse = dlg.DoModal();
	
	if (nResponse == IDOK)
	{
		// TODO: 在此处放置处理何时用“确定”来关闭
		//  对话框的代码
		
	}
	else if (nResponse == IDCANCEL)
	{
		// TODO: 在此放置处理何时用“取消”来关闭
		//  对话框的代码
	}
	
	
	// 由于对话框已关闭，所以将返回 FALSE 以便退出应用程序，
	//  而不是启动应用程序的消息泵。
	return FALSE;
}

CFileShareApp* GetSvrApp()
{
	return (CFileShareApp*)AfxGetApp();
}

void CFileShareApp::CommitTask(CBuffer* pDataToProc, CString strClientAddr)
{
	TASK_INFO_TYPE *pTaskInfo;
	pTaskInfo=new TASK_INFO_TYPE;
	pTaskInfo->pDataToProc=pDataToProc;
	pTaskInfo->strCliAddr=strClientAddr;

	m_TaskQueue.PutTask(pTaskInfo);
}

int CFileShareApp::ExitInstance()
{
	// TODO: 在此添加专用代码和/或调用基类
	m_NiThread->PostThreadMessageW(WM_QUIT,NULL,NULL);

	for(int i=0;i<TASK_THREAD_NUM;i++)
	{
		m_TaskThread[i].PostThreadMessageW(WM_QUIT,NULL,NULL);
	}

	SAFE_DELETE(m_ShareInfo);

	return CWinApp::ExitInstance();
}

void CFileShareApp::SendData(CBuffer bufToSend, CString strCliAddr)
{
	m_NiThread->SendData(bufToSend,strCliAddr);
}

void CFileShareApp::SendFile(CBuffer bufToSend, CString strCliAddr)
{
	m_NiThread->SendFile(bufToSend,strCliAddr);
}

TASK_INFO_TYPE* CFileShareApp::GetTask(void)
{
	return m_TaskQueue.GetTask();
}


